import re
#1.分之
"""
条件1 | 条件2 - 匹配条件1或者条件2
\d | [a-z] - 匹配数字或者小写字母
a\d{2} | \w{2} - 匹配一个a后面两个数字，或者两个数字字母下划线

注意：正则中的分之也会出现短路，当条件1可以匹配，就不会再使用条件2进行匹配
"""
print(re.fullmatch(r"\d{2}|[a-z]","22"))
print(re.fullmatch(r"a\d{2}|\w{2}","a23"))

#练习：写一个正则表达式，匹配所有的数字，包括正的，负的，整数，小数，0
re_str =r"[+-]?0[.]\d*|[+-]?[1-9]\d*[.]?\d*"
result =re.fullmatch(re_str,"-0.1212")
print(result)

#2.捕获和分组
"""
a.分组 - 将括号里面的内容作为一个整体
b.捕获 
re.findall（正则表达式，字符串）  -在字符串中获取符号正则表达式条件的所有子串
                                  返回的是一个列表
通过正则去获取符号条件的子串的时候，可以在正则表达式中加括号，匹配后只获取括号里面的内容
"""
#=============分组==============
# 匹配一个字符串，前三位是‘abc’，后三位是三个数字或者三个大写字母
re_str =r"abc\d{3}|abc[A-Z]{3}"
re_str1 =r"abc(\d{3}|[A-Z]{3})"

#匹配一个字符串，以“数字小写字母”的形式出现三次
re_str =r"(\d[a-z]){3}"

#=============捕获=============
str1 ="asda1218a5d54ea2323dd"
print(re.findall(r"a\d+",str1)) # ['a1218', 'a5', 'a2323']
#取值的时候只取括号里面的内容
print(re.findall(r"a(\d+)",str1))# ['1218', '5', '2323']

"""
c.重复匹配
带多个分组的正则表达式中可以在分组的后面通过添加 \数字 来重复前面第几个分组中匹配到的内容

注意：重复的内容必须一致
"""
# 说明：\数字 - 这儿的数字代表前面第几个分组；\1代表第一个分组
re_str =r"\d{3}([a-z]{2})a-\1"
print(re.fullmatch(re_str,"123cea-ce"))

#3.贪婪
"""
匹配次数后加？就是贪婪匹配：*？ +？ ？？ {M,N}？ {M,}? 表示尽可能少的重复
"""
re_str = "a.+?b"
str1 ="xxxahhhdbhjahjbhjee"
print("====",re.findall(re_str,str1)) #['ahhhdb', 'ahjb']

#4.转义字符
"""
在正则表达式中可以在有特殊意义或者特殊功能的符号前加\来取消其特殊功能或者意义
\\w  - 代表两个字符是“\”和w
\+ - 代表+字符
[],(),{} 表示字符的时候，前面也要加\
注意：在[]中，\必须加\表示\本身，^和-也要加\，表示其本身
"""