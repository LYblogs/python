# 1.根据实参分为位置参数和关键字参数（都需要保证每个参数有值）
"""
a.位置参数
实参的位置和形参的位置一一对应
b.关键字参数
实参以  “形参名 = 值”形式来传参
c.位置参数和关键字参数混合使用
前提：保证每个参数都有值;
位置参数一定要在关键字参数前面
"""
def function(a,b,c):
    print(a,b,c)


function(100,c=200,b=2)

# 2.从函数声明的角度又有：参数默认值，不定长参数，参数类型说明
"""
a.参数默认值
声明函数的时候可以给参数设置默认值，
语法：参数名 = 默认值
注意：设置默认值除了可以给参数一个默认的值，更多的时候可能只是想要对参数的类型进行说明。
"""
#如果函数声明的时候参数有默认值，调用函数的时候，有默认值的参数可以不用赋值。
#有默认值得参数要在没有默认值的参数后面


def function2(b,c="a",a=1):
    print("aaa",a,b,c)

function2(1,"e",5)

# 3.不定长参数
"""
不定长参数：声明函数的时候，函数的参数不确定
"""
# a.在声明函数的时候，参数名前加一个*，会将这个参数变为元组，来获取多个实参的值。
# 练习：声明一个函数，功能是求多个数的和
def num_sum(*num):
    print(sum(num)) #45
    print(num)  #(5, 9, 8, 7, 8, 8)

num_sum(5,9,8,7,8,8)
a=(5,9,8,7,8)
print(sum(a)) #37

a,*b = [1,5,6,9,8,7]
print(b) #[5, 6, 9, 8, 7]
# b.在声明函数的时候，参数名前加一个**，会将这个参数变为字典，来获取多个实参的值(必须使用关键字来传参)

def func5(**num):
    print(num)

func5(a=1,b=2,c=3) #{'a': 1, 'b': 2, 'c': 3}
func5() #{}
func5(name="asd",age=18) #{'name': 'asd', 'age': 18}

#如果不是调用不定长关键字参数（产生前面加两颗*），调用的时候关键字可以随便命名。

"""
c.一颗*和两颗*一起使用 - 用来表示不定长参数，
调用时候更灵活，可以用位置参数传参，也可以关键字参数传参。

要求：一颗*的参数要放在两颗*的前面


"""

def func7(*args,**kwargs):
    print(args,kwargs)


func7() #() {}
func7(8,9,10,20) #(8, 9, 10, 20) {}
func7(a=10,b=20) #() {'a': 10, 'b': 20}
func7(8,9,10,a=50,b=97) #(8, 9, 10) {'a': 50, 'b': 97}

#练习：求多个数的和，要求：调用函数的时候可以多样性。
def sum1_num(*args,**kwargs):
    sum = 0
    sum = sum(args)+sum(kwargs.values())
    print(sum)
sum1_num(8,9,10,60,a=10,b=20)


# 4.参数类型的说明
"""
参数类型说明，只是对参数类型进行提示，不能限制参数的类型
a.设置默认值
b.参数名：类型名
注意：类型说明除了说明类型以外，还可以做相应类型对应的语法提示
"""
def func8(a1,a:str="sd",b=20):
    print(a1,a,b)
func8()